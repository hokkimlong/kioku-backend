generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int             @id @default(autoincrement())
  username             String          @unique
  email                String          @unique
  password             String
  createdAt            DateTime        @default(now())
  activities           ActivityUsers[]
  groupChats           GroupChat[]
  informations         Information[]
  posts                Post[]
  PostComment          PostComment[]
  PostLike             PostLike[]
  NotificationSent     Notification[]  @relation("sender")
  NotificationRecieved Notification[]  @relation("receiver")
}

model Activity {
  id           Int             @id @default(autoincrement())
  name         String
  image        String
  startDate    DateTime        @default(now())
  endDate      DateTime        @default(now())
  createdAt    DateTime        @default(now())
  users        ActivityUsers[]
  groupChats   GroupChat[]
  informations Information[]
  posts        Post[]
  Notification Notification[]
}

model ActivityUsers {
  userId     Int
  activityId Int
  role       Role     @default(USER)
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, activityId])
}

model Information {
  id           Int                @id @default(autoincrement())
  title        String
  description  String
  activityId   Int
  userId       Int
  createdAt    DateTime           @default(now())
  activity     Activity           @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  images       InformationImage[]
  Notification Notification[]
}

model InformationImage {
  id            Int         @id @default(autoincrement())
  informationId Int
  uri           String
  information   Information @relation(fields: [informationId], references: [id], onDelete: Cascade)
}

model GroupChat {
  id         Int      @id @default(autoincrement())
  activityId Int
  userId     Int
  message    String
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id           Int            @id @default(autoincrement())
  activityId   Int
  userId       Int
  description  String
  createdAt    DateTime       @default(now())
  activity     Activity       @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id],onDelete: Cascade)
  postComments PostComment[]
  postImages   PostImage[]
  postLikes    PostLike[]
  Notification Notification[]
}

model PostImage {
  id     Int    @id @default(autoincrement())
  uri    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostLike {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostComment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  message   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model Notification {
  id            Int          @id @default(autoincrement())
  activityId    Int
  activity      Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  postId        Int?
  post          Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  informationId Int?
  information   Information? @relation(fields: [informationId], references: [id], onDelete: Cascade)
  message       String
  senderId      Int
  sender        User         @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId    Int
  receiver      User         @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  isRead        Boolean      @default(false)
  isSeen        Boolean      @default(false)
  createdAt     DateTime     @default(now())
}
