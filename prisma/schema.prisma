// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int             @id @default(autoincrement())
  username     String          @unique
  email        String          @unique
  password     String
  createdAt    DateTime        @default(now())
  activities   ActivityUsers[]
  informations Information[]
  groupChats   GroupChat[]
  posts        Post[]
  PostLike     PostLike[]
  PostComment  PostComment[]
}

model Activity {
  id           Int             @id @default(autoincrement())
  name         String
  background   String
  createdAt    DateTime        @default(now())
  users        ActivityUsers[]
  informations Information[]
  groupChats   GroupChat[]
  posts        Post[]
}

model ActivityUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int
  role       Role     @default(USER)

  @@id([userId, activityId])
}

model Information {
  id          Int                @id @default(autoincrement())
  title       String
  description String
  background  String
  activity    Activity           @relation(fields: [activityId], references: [id])
  activityId  Int
  user        User               @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime           @default(now())
  images      InformationImage[]
}

model InformationImage {
  id            Int         @id @default(autoincrement())
  information   Information @relation(fields: [informationId], references: [id])
  informationId Int
  image         String
}

model GroupChat {
  id         Int      @id @default(autoincrement())
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  message    String
  isSeen     Boolean
  createdAt  DateTime @default(now())
}

model Post {
  id           Int           @id @default(autoincrement())
  activity     Activity      @relation(fields: [activityId], references: [id])
  activityId   Int
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  description  String
  createdAt    DateTime      @default(now())
  postImages   PostImage[]
  postLikes    PostLike[]
  postComments PostComment[]
}

model PostImage {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int
}

model PostLike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model PostComment {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  createdAt DateTime @default(now())
}
